(defclass player ()
        ((name     :initarg :name)
         (life     :initarg :life    :initform 20)
         (library  :initarg :library :initform nil)
         (hand     :initarg :hand    :initform nil)
         (poison                     :initform 0)
         (playedland                 :initform nil)
         (manapool                   :initform 0)))
 
(defun get-player-name       (player) (slot-value player 'name))
(defun get-player-life       (player) (slot-value player 'life))
(defun get-player-library    (player) (slot-value player 'library))
(defun get-player-poison     (player) (slot-value player 'poison))
(defun get-player-hand       (player) (slot-value player 'hand))
(defun get-player-handsize   (player) (length (slot-value player 'hand)))
(defun get-player-manapool   (player) (slot-value player 'manapool))
(defun get-player-playedland (player) (slot-value player 'playedland))

(defun set-player-name       (player name) (setf (slot-value player 'name)     name))
(defun set-player-life       (player life) (setf (slot-value player 'life)     life))
(defun set-player-library    (player lib)  (setf (slot-value player 'library)  lib))
(defun set-player-poison     (player poi)  (setf (slot-value player 'poison)   poi))
(defun set-player-hand       (player hand) (setf (slot-value player 'hand)     hand))
(defun set-player-manapool   (player size) (setf (slot-value player 'manapool) size))
(defun set-player-playedland (player tf)   (setf (slot-value player 'playedland) tf))

(defun empty-manapool (player) (set-player-manapool player 0))

;(defun teammate? (player1 player2) nil)
;(defun opponent? (player1 player2) nil)
(defun get-apnap ()) 
(defun get-active-player ())

(defun gain-life   (player num) (set-player-life player (+ (get-player-life   player) num)))
(defun lose-life   (player num) (set-player-life player (- (get-player-life   player) num)))
(defun set-life    (player num) (set-player-life player num))
(defun gain-poison (player num) (set-player-life player (+ (get-player-poison player) num)))
(defun lose-poison (player num) (set-player-life player (- (get-player-poison player) num)))

(defclass team ()
        ((teamname  :initarg :teamname)
         (teammates :initarg :teammates)))

;(defun tapped-out (player))

(defun discard-downto (player num)
        (when (> (get-player-handsize player) num) (format t "discarding down to ~a~%" num)))

(defun shuffle (player)
        (shuffle-list (get-player-library player)))
