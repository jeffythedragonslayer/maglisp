(defparameter *tap-symbol*   'T)
(defparameter *untap-symbol* 'Q)

(defclass mtg-object   ()
        ((owner      :initarg :owner)
         (controller :initarg :controller)))

(defclass characteristics () ; 109.3
        ((name                :initarg :name)
         (cmc                 :initarg :cmc)
         (colors              :initarg :colors)
         (color-indicator     :initarg :color-indicator)
         (cardtypes           :initarg :cardtypes)
         (subtype             :initarg :subtype)
         (supertype           :initarg :supertype)
         (text                :initarg :text          :initform "")
         (abilities           :initarg :abilities     :initform nil)
         (power               :initarg :power         :initform 0)
         (toughness           :initarg :toughness     :initform 0)
         (loyalty             :initarg :loyalty       :initform 0)
         (hand-modifier       :initarg :hand-modifier :initform nil)
         (life-modifier       :initarg :life-modifier :initform nil)))

(defclass status () ; 110.6
        ((tapped   :initarg :tapped   :initform nil)
         (flipped  :initarg :flipped  :initform nil)
         (faceup   :initarg :faceup   :initform t)
         (phasedin :initarg :phasedin :initform t)))

(defclass card (mtg-object)
        ((artist              :initarg :artist          :initform "")
         (rarity              :initarg :rarity          :initform "")
         (flavor              :initarg :flavor          :initform "")
         (creature-dat                                  :initform (make-instance 'creature-data))
         (planeswalker-dat                              :initform (make-instance 'planeswalker-data))
         (characteristics     :initarg :characteristics :initform (make-instance 'characteristics))
         (status              :initarg :status          :initform (make-instance 'status))))

(defun get-card-owner           (card) (slot-value card 'owner))
(defun get-card-controller      (card) (slot-value card 'controller)) 
(defun set-card-owner!          (card owner)      (setf (slot-value card 'owner)      owner))
(defun set-card-controller!     (card controller) (setf (slot-value card 'controller) controller))
(defun get-card-name            (card) (slot-value (slot-value card 'characteristics) 'name))
(defun get-card-cmc             (card) (slot-value (slot-value card 'characteristics) 'cmc))
(defun get-card-colors          (card) (slot-value (slot-value card 'characteristics) 'colors))
(defun get-card-color-indicator (card) (slot-value (slot-value card 'characteristics) 'color-indicator))
(defun get-card-cardtypes       (card) (slot-value (slot-value card 'characteristics) 'cardtypes))
(defun get-card-subtype         (card) (slot-value (slot-value card 'characteristics) 'subtype))
(defun get-card-supertype       (card) (slot-value (slot-value card 'characteristics) 'supertype))
(defun get-card-text            (card) (slot-value (slot-value card 'characteristics) 'text))
(defun get-card-abilities       (card) (slot-value (slot-value card 'characteristics) 'abilities))
(defun get-card-power           (card) (slot-value (slot-value card 'characteristics) 'power))
(defun get-card-toughness       (card) (slot-value (slot-value card 'characteristics) 'toughness))
(defun get-card-loyalty         (card) (slot-value (slot-value card 'characteristics) 'loyalty))
(defun get-card-hand-modifier   (card) (slot-value (slot-value card 'characteristics) 'hand-modifier))
(defun get-card-life-modifier   (card) (slot-value (slot-value card 'characteristics) 'life-modifier))
(defun tapped?                  (card) (slot-value (slot-value card 'status) 'tapped))
(defun untapped?                (card) (not (slot-value (slot-value card 'status) 'tapped)))
(defun flipped?                 (card) (slot-value (slot-value card 'status) 'flipped))
(defun unflipped?               (card) (not (slot-value (slot-value card 'status) 'flipped)))
(defun faceup?                  (card) (slot-value (slot-value card 'status) 'faceup))
(defun facedown?                (card) (not (slot-value (slot-value card 'status) 'faceup)))
(defun phasedin?                (card) (slot-value (slot-value card 'status) 'phasedin))
(defun phasedout?               (card) (slot-value (slot-value card 'status) 'phasedout))

(defun tap!     (card) (setf (slot-value (slot-value card 'status) 'tapped) t))
(defun untap!   (card) (setf (slot-value (slot-value card 'status) 'tapped) nil))

(defun land?         (card) (member 'land         (get-card-cardtypes card)))
(defun creature?     (card) (member 'creature     (get-card-cardtypes card)))
(defun instant?      (card) (member 'instant      (get-card-cardtypes card)))
(defun sorcery?      (card) (member 'sorcery      (get-card-cardtypes card)))
(defun enchantment?  (card) (member 'enchantment  (get-card-cardtypes card)))
(defun planeswalker? (card) (member 'planeswalker (get-card-cardtypes card)))
(defun artifact?     (card) (member 'artifact     (get-card-cardtypes card)))

(defun make-card (&key name cmc colors types subtype supertype text abilities
                       static-abilities tap-abilities activated-abilities triggered-abilities
                       power toughness loyalty artist rarity flavor)
        (let* ((chars (make-instance 'characteristics))
	       (stats (make-instance 'status))
	       (c     (make-instance 'card)))
	  (progn
                (when static-abilities (setf (slot-value chars 'abilities) static-abilities))
                (setf (slot-value chars 'name)      name)
                (setf (slot-value chars 'cmc)       cmc)
                (setf (slot-value chars 'colors)    colors)
                (setf (slot-value chars 'cardtypes) types)
                (setf (slot-value chars 'subtype)   subtype)
                (setf (slot-value chars 'supertype) supertype)
                (setf (slot-value chars 'text)      text)
                (setf (slot-value chars 'power)     power)
                (setf (slot-value chars 'toughness) toughness)
                (setf (slot-value chars 'loyalty)   loyalty)
                (setf (slot-value c 'characteristics) chars)
                (setf (slot-value c 'status) stats)
                (setf (slot-value c 'artist) artist)
                (setf (slot-value c 'flavor) flavor)
                (setf (slot-value c 'rarity) rarity)
                (when tap-abilities nil)
                (when activated-abilities nil)
                (when abilities nil)
                (when triggered-abilities nil)
	        c)))

(defun copy-card (card)
        (make-card :name       (get-card-name       card)
                   :cmc        (get-card-cmc        card)
                   :power      (get-card-power      card)
                   :toughness  (get-card-toughness  card)
                   :loyalty    (get-card-loyalty    card)
                   :types      (get-card-cardtypes  card)
                   :subtype    (get-card-subtype    card)
                   :supertype  (get-card-supertype  card)
                   :text       (get-card-text       card)
                   :abilities  (get-card-abilities  card)))

;(defclass copy-of-card (mtg-object) ())

;(defclass spell (card) ())
;(defclass permanent (mtg-object)
;        ((tapped   :initarg :tapped   :initform nil)
;         (facedown :initarg :facedown :initform nil)))

;(defclass card-permanent (permanent)
;        ())

;(defclass snow () ())

;(defclass attachable (mtg-object)
;        ((attach-target :initarg :attach-target)
;         (timestamp     :initarg :timestamp)))

;(defclass artifact (card permanent) ()) 
;        (defclass equipment (artifact attachable) ())
;        (defclass fortification (artifact attachable) ())
;        (defclass contraption (artifact) ())
;(defclass artifact-creature (artifact creature) ())
;(defclass artifact-lands (artifact lands) ())
;(defclass instant (spell) ())
;        (defclass interrupt (spell) ())
;        (defclass trap (spell) ())
;        (defclass arcane (spell) ())
;(defclass sorcery (spell) ())
;(defclass enchantment (spell) ())
;        (defclass curse (enchantment) ())
 ;       (defclass shrine (spell) ())
;        (defclass world (enchantment) ())
;(defclass aura (enchantment attachable) ())
;(defclass token (permanent) ())
;(defclass legend () ())
;(defclass enchantment-artifact (enchantment artifact) ())
;(defclass enchantment-creature (enchantment creature) ())
;(defclass artifact-enchantment-creature (artifact-enchantment creature) ())

(defclass emblem (mtg-object) ())

;(defgeneric damage (perm))

;(defun flip-faceup (perm)
;        (setf (facedown perm) nil))

;(defun flip-facedown (perm)
;        (setf (facedown perm) t))

;(defun attach (source target)
;        (setf (attach-target source) target)
;        (setf (timestamp     source) (get-universal-time)))

;(defun detach (source)
;        (setf (attach-target source) nil)
;        (setf (timestamp     source) nil))

;(defun proliferate ())

;(defun vanilla? (card))
;(defun get-timestamp () 'nil)
;(defun devotion (player type))

(defun has-static-ability? (card ability)
        (member ability (get-card-abilities card)))
