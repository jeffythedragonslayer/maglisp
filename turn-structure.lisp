(defparameter *active-player*     nil)
(defparameter *nonactive-players* nil)
(defparameter *current-phase*     nil)
(defparameter *current-step*      nil) 
(defparameter *attackers*         nil) ; list of attacking creatures
(defparameter *blockers*          nil) ; list of dotted pairs consisting of (BLOCKING-CREATURE. ATTACKING_CREATURE)

(load "interface.lisp")

(defun untap-all       () (mapcar #'untap! *battlefield*)) 
(defun empty-manapools () (mapcar #'empty-manapool *all-players*))

(defun untap-step () 
        (setf *current-step* 'untap)
        (with-color 'yellow (format t "Untap Step~%"))
        ;(phasing)
        (untap-all)
        (empty-manapools))

(defun upkeep-step () 
        (setf *current-step* 'upkeep)
        (with-color 'yellow (format t "Upkeep Step~%"))
        ;(triggers)
        (unless (member 'upkeep *skip-priority-steps*)
                (get-priority-loop))
        (empty-manapools))

(defun draw-step ()
        (setf *current-step* 'draw)
        (with-color 'yellow (format t "Draw Step~%"))
        (draw *active-player*) 
        ;(triggers)
        (unless (member 'draw *skip-priority-steps*)
                (get-priority-loop))
        (empty-manapools))

(defun beginning-phase ()
        (setf *current-phase* 'beginning)
        (with-color 'green (format t "--- Beginning Phase ---~%"))
	(untap-step)
	(upkeep-step)
	(draw-step)
        (empty-manapools))

(defun main-phase (which)
        (setf *current-phase* 'main)
        (with-color 'green (format t "--- Main Phase ~a ---~%" which))
	(unless (member 'main *skip-priority-steps*)
                (get-priority-loop))
        (empty-manapools))

(defun beginning-of-combat-step () 
        (setf *current-step* 'beginning-of-combat)
        (with-color 'yellow (format t "Beginning of Combat Step~%"))
        ;507.1. First, if the game being played is a multiplayer game in which the active player’s opponents don’t all automatically become defending players,
        ;       the active player chooses one of his or her opponents. That player becomes the defending player. This turn-based action doesn’t use the stack. (See rule 506.2.)
        ;507.2. Second, any abilities that trigger at the beginning of combat go on the stack. (See rule 603, “Handling Triggered Abilities.”)
        (unless (member 'beginning-of-combat *skip-priority-steps*)
                (get-priority-loop)) ;507.3
        (empty-manapools))

(defun declare-attackers-step () 
        (setf *current-step* 'declare-attackers)
        (with-color 'yellow (format t "Declare Attackers Step~%"))
        (prompt-attackers *active-player*)
        (mapcar (lambda (x) (unless (has-static-ability? x 'vigilance)) #'tap!) *attackers*)
        (unless (member 'declare-attackers *skip-priority-steps*)
                (get-priority-loop))
        (empty-manapools))

(defun declare-blockers-step ()
        (setf *current-step*'declare-blockers)
        (with-color 'yellow (format t "Declare Blockers Step~%"))
        (mapcar (lambda (x) (prompt-blockers x)) *nonactive-players*) 
        (unless (member 'declare-blockers *skip-priority-steps*)
                (get-priority-loop))
        (empty-manapools))

(defun combat-damage-step () 
        (setf *current-step* 'combat-damage)
        (with-color 'yellow (format t "Combat Damage Step~%"))
        (mapcar #'deal-damage *nonactive-players*) 
        (unless (member 'combat-damage *skip-priority-steps*)
                (get-priority-loop))
        (empty-manapools))

(defun end-of-combat-step ()
        (setf *current-step* 'end-of-combat)
        (with-color 'yellow (format t "End of Combat Step~%"))
        ; 511.1 First, all “at end of combat” abilities trigger and go on the stack. (See rule 603, “Handling Triggered Abilities.”) 
        (unless (member 'end-of-combat *skip-priority-steps*)
                (get-priority-loop)) ;511.2
        ; 511.3 As soon as the end of combat step ends, all creatures and planeswalkers are removed from combat.
        ;       After the end of combat step ends, the combat phase is over and the postcombat main phase begins (see rule 505).
        (empty-manapools))

(defun combat-phase ()
        (setf *current-phase* 'combat)
        (with-color 'green (format t "--- Combat Phase ---~%"))
        (beginning-of-combat-step)
        (declare-attackers-step)
        (if *attackers*
            (progn (declare-blockers-step)
                   (combat-damage-step))
            (format t "no attackers, skipping declare blockers and combat damage steps~%")) ; 508.6
        (end-of-combat-step)
        (empty-manapools))

(defun end-step ()
        (setf *current-step* 'end)
        (with-color 'yellow (format t "End Step~%")) 
        (unless (member 'end *skip-priority-steps*)
                (get-priority-loop))
        (empty-manapools))

(defun heal-all-permanents ()
        (mapcar (lambda (x)
                        (when (creature? x)
                              (heal! x)))
                *battlefield*))

(defun cleanup-step ()
        (setf *current-step* 'cleanup)
        (with-color 'yellow (format t "Cleanup Step~%"))
        (discard-downto *active-player* 7)
        (heal-all-permanents)
        (when (check-state-based-actions)
              (cleanup-step))
        (empty-manapools))

(defun ending-phase ()
        (setf *current-phase* 'ending)
        (with-color 'green (format t "--- Ending Phase ---~%"))
	(end-step)
	(cleanup-step)
        (empty-manapools))

(defun reset-summoning-sickness ()
        (mapcar #'notsick! *battlefield*))

(defun turn (player)
        (setf *active-player* player) 
        (setf *nonactive-players* (remove-if (lambda (x) (equal x *active-player*)) *all-players*))
	(set-player-playedland *active-player* nil)
	(reset-summoning-sickness)
        (with-color 'cyan (format t "========= ~a's Turn =========~%" (get-player-name player)))
	(beginning-phase)
	(main-phase 1)
	(combat-phase)
	(main-phase 2)
	(ending-phase))
